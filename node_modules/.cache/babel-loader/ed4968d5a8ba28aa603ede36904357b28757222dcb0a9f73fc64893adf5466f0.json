{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { createReducer, createAsyncThunk } from '@reduxjs/toolkit';\nimport { searchRequest, searchSuccess, searchError, setQuery, setPage } from './search-actions';\n\n// const result = createReducer([], {\n//     [searchSuccess]: (_, action) => action.payload,\n// });\n\nconsole.log(result);\nconst result = createAsyncThunk(searchSuccess, async () => {\n  const data = await fetch('http://localhost:3001/comments').then(res => res.json());\n  const mappedData = data.map(comment => ({\n    ...comment,\n    tags: comment.tags.map(tag => ({\n      ...tag,\n      commentId: comment.id\n    })),\n    likes: comment.likes.map(like => ({\n      ...like,\n      commentId: comment.id\n    }))\n  }));\n  const tags = mappedData.reduce((prev, curr) => [...prev, curr.tags], []).flat();\n  const likes = mappedData.reduce((prev, curr) => [...prev, curr.likes], []).flat();\n  const comments = mappedData.map(_ref => {\n    let {\n      id,\n      body,\n      likes,\n      tags\n    } = _ref;\n    return {\n      id,\n      body,\n      likesIds: likes.map(like => like.id),\n      tagsIds: tags.map(tag => tag.id)\n    };\n  });\n  return {\n    comments,\n    likes,\n    tags\n  };\n});\nconst query = createReducer([], {\n  [setQuery]: (_, action) => action.payload\n});\nconst page = createReducer([], {\n  [setPage]: (_, action) => action.payload\n});\nconst loading = createReducer(false, {\n  [searchRequest]: () => true,\n  [searchSuccess]: () => false,\n  [searchError]: () => false\n});\nexport default combineReducers({\n  result,\n  query,\n  page,\n  loading\n});","map":{"version":3,"names":["combineReducers","createReducer","createAsyncThunk","searchRequest","searchSuccess","searchError","setQuery","setPage","console","log","result","data","fetch","then","res","json","mappedData","map","comment","tags","tag","commentId","id","likes","like","reduce","prev","curr","flat","comments","_ref","body","likesIds","tagsIds","query","_","action","payload","page","loading"],"sources":["/home/dmytro/Documents/GitHub/goit_last/goit_gh/src/redux/search/search-reducer.js"],"sourcesContent":["import { combineReducers } from 'redux';\r\nimport { createReducer, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { searchRequest, searchSuccess, searchError, setQuery, setPage } from './search-actions';\r\n\r\n// const result = createReducer([], {\r\n//     [searchSuccess]: (_, action) => action.payload,\r\n// });\r\n\r\nconsole.log(result);\r\n\r\nconst result = createAsyncThunk(searchSuccess, async () => {\r\n    const data = await fetch('http://localhost:3001/comments').then(res => res.json());\r\n    const mappedData = data.map(comment => ({\r\n        ...comment,\r\n        tags: comment.tags.map(tag => ({ ...tag, commentId: comment.id })),\r\n        likes: comment.likes.map(like => ({ ...like, commentId: comment.id })),\r\n    }));\r\n    const tags = mappedData.reduce((prev, curr) => [...prev, curr.tags], []).flat();\r\n    const likes = mappedData.reduce((prev, curr) => [...prev, curr.likes], []).flat();\r\n    const comments = mappedData.map(({ id, body, likes, tags }) => ({\r\n        id,\r\n        body,\r\n        likesIds: likes.map(like => like.id),\r\n        tagsIds: tags.map(tag => tag.id),\r\n    }));\r\n    return { comments, likes, tags };\r\n});\r\n\r\nconst query = createReducer([], {\r\n    [setQuery]: (_, action) => action.payload,\r\n});\r\n\r\nconst page = createReducer([], {\r\n    [setPage]: (_, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [searchRequest]: () => true,\r\n    [searchSuccess]: () => false,\r\n    [searchError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n    result,\r\n    query,\r\n    page,\r\n    loading,\r\n});\r\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,OAAO;AACvC,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,kBAAkB;AAClE,SAASC,aAAa,EAAEC,aAAa,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,kBAAkB;;AAE/F;AACA;AACA;;AAEAC,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;AAEnB,MAAMA,MAAM,GAAGR,gBAAgB,CAACE,aAAa,EAAE,YAAY;EACvD,MAAMO,IAAI,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAClF,MAAMC,UAAU,GAAGL,IAAI,CAACM,GAAG,CAACC,OAAO,KAAK;IACpC,GAAGA,OAAO;IACVC,IAAI,EAAED,OAAO,CAACC,IAAI,CAACF,GAAG,CAACG,GAAG,KAAK;MAAE,GAAGA,GAAG;MAAEC,SAAS,EAAEH,OAAO,CAACI;IAAG,CAAC,CAAC,CAAC;IAClEC,KAAK,EAAEL,OAAO,CAACK,KAAK,CAACN,GAAG,CAACO,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEH,SAAS,EAAEH,OAAO,CAACI;IAAG,CAAC,CAAC;EACzE,CAAC,CAAC,CAAC;EACH,MAAMH,IAAI,GAAGH,UAAU,CAACS,MAAM,CAAC,CAACC,IAAI,EAAEC,IAAI,KAAK,CAAC,GAAGD,IAAI,EAAEC,IAAI,CAACR,IAAI,CAAC,EAAE,EAAE,CAAC,CAACS,IAAI,CAAC,CAAC;EAC/E,MAAML,KAAK,GAAGP,UAAU,CAACS,MAAM,CAAC,CAACC,IAAI,EAAEC,IAAI,KAAK,CAAC,GAAGD,IAAI,EAAEC,IAAI,CAACJ,KAAK,CAAC,EAAE,EAAE,CAAC,CAACK,IAAI,CAAC,CAAC;EACjF,MAAMC,QAAQ,GAAGb,UAAU,CAACC,GAAG,CAACa,IAAA;IAAA,IAAC;MAAER,EAAE;MAAES,IAAI;MAAER,KAAK;MAAEJ;IAAK,CAAC,GAAAW,IAAA;IAAA,OAAM;MAC5DR,EAAE;MACFS,IAAI;MACJC,QAAQ,EAAET,KAAK,CAACN,GAAG,CAACO,IAAI,IAAIA,IAAI,CAACF,EAAE,CAAC;MACpCW,OAAO,EAAEd,IAAI,CAACF,GAAG,CAACG,GAAG,IAAIA,GAAG,CAACE,EAAE;IACnC,CAAC;EAAA,CAAC,CAAC;EACH,OAAO;IAAEO,QAAQ;IAAEN,KAAK;IAAEJ;EAAK,CAAC;AACpC,CAAC,CAAC;AAEF,MAAMe,KAAK,GAAGjC,aAAa,CAAC,EAAE,EAAE;EAC5B,CAACK,QAAQ,GAAG,CAAC6B,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC;AACtC,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGrC,aAAa,CAAC,EAAE,EAAE;EAC3B,CAACM,OAAO,GAAG,CAAC4B,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC;AACrC,CAAC,CAAC;AAEF,MAAME,OAAO,GAAGtC,aAAa,CAAC,KAAK,EAAE;EACjC,CAACE,aAAa,GAAG,MAAM,IAAI;EAC3B,CAACC,aAAa,GAAG,MAAM,KAAK;EAC5B,CAACC,WAAW,GAAG,MAAM;AACzB,CAAC,CAAC;AAEF,eAAeL,eAAe,CAAC;EAC3BU,MAAM;EACNwB,KAAK;EACLI,IAAI;EACJC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}