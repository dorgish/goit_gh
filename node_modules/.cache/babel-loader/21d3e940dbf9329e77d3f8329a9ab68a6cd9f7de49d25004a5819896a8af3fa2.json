{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { createReducer, createAsyncThunk } from '@reduxjs/toolkit';\nimport { searchRequest, searchSuccess, searchError, setQuery, setPage } from './search-actions';\nconst result = createReducer([], {\n  [searchSuccess]: (_, action) => action.payload\n});\nconsole.log(result);\n\n// const updateUser = createAsyncThunk('users/update', async (userData, { rejectWithValue }) => {\n//     const { id, ...fields } = userData;\n//     try {\n//         const response = await userAPI.updateById(id, fields);\n//         return response.data.user;\n//     } catch (err) {\n//         // Use `err.response.data` as `action.payload` for a `rejected` action,\n//         // by explicitly returning it using the `rejectWithValue()` utility\n//         return rejectWithValue(err.response.data);\n//     }\n// });\n\nconst query = createReducer([], {\n  [setQuery]: (_, action) => action.payload\n});\nconst page = createReducer([], {\n  [setPage]: (_, action) => action.payload\n});\nconst loading = createReducer(false, {\n  [searchRequest]: () => true,\n  [searchSuccess]: () => false,\n  [searchError]: () => false\n});\nexport default combineReducers({\n  result,\n  query,\n  page,\n  loading\n});","map":{"version":3,"names":["combineReducers","createReducer","createAsyncThunk","searchRequest","searchSuccess","searchError","setQuery","setPage","result","_","action","payload","console","log","query","page","loading"],"sources":["/home/dmytro/Documents/GitHub/goit_last/goit_gh/src/redux/search/search-reducer.js"],"sourcesContent":["import { combineReducers } from 'redux';\r\nimport { createReducer, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { searchRequest, searchSuccess, searchError, setQuery, setPage } from './search-actions';\r\n\r\nconst result = createReducer([], {\r\n    [searchSuccess]: (_, action) => action.payload,\r\n});\r\n\r\nconsole.log(result);\r\n\r\n// const updateUser = createAsyncThunk('users/update', async (userData, { rejectWithValue }) => {\r\n//     const { id, ...fields } = userData;\r\n//     try {\r\n//         const response = await userAPI.updateById(id, fields);\r\n//         return response.data.user;\r\n//     } catch (err) {\r\n//         // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n//         // by explicitly returning it using the `rejectWithValue()` utility\r\n//         return rejectWithValue(err.response.data);\r\n//     }\r\n// });\r\n\r\nconst query = createReducer([], {\r\n    [setQuery]: (_, action) => action.payload,\r\n});\r\n\r\nconst page = createReducer([], {\r\n    [setPage]: (_, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [searchRequest]: () => true,\r\n    [searchSuccess]: () => false,\r\n    [searchError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n    result,\r\n    query,\r\n    page,\r\n    loading,\r\n});\r\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,OAAO;AACvC,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,kBAAkB;AAClE,SAASC,aAAa,EAAEC,aAAa,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,kBAAkB;AAE/F,MAAMC,MAAM,GAAGP,aAAa,CAAC,EAAE,EAAE;EAC7B,CAACG,aAAa,GAAG,CAACK,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC;AAC3C,CAAC,CAAC;AAEFC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMM,KAAK,GAAGb,aAAa,CAAC,EAAE,EAAE;EAC5B,CAACK,QAAQ,GAAG,CAACG,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC;AACtC,CAAC,CAAC;AAEF,MAAMI,IAAI,GAAGd,aAAa,CAAC,EAAE,EAAE;EAC3B,CAACM,OAAO,GAAG,CAACE,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC;AACrC,CAAC,CAAC;AAEF,MAAMK,OAAO,GAAGf,aAAa,CAAC,KAAK,EAAE;EACjC,CAACE,aAAa,GAAG,MAAM,IAAI;EAC3B,CAACC,aAAa,GAAG,MAAM,KAAK;EAC5B,CAACC,WAAW,GAAG,MAAM;AACzB,CAAC,CAAC;AAEF,eAAeL,eAAe,CAAC;EAC3BQ,MAAM;EACNM,KAAK;EACLC,IAAI;EACJC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}